---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import Layout from '~/layouts/PageLayout.astro';
import SinglePost from '~/components/blog/SinglePost.astro';
import ToBlogLink from '~/components/blog/ToBlogLink.astro';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsBlogSong, blogSongRobots } from '~/utils/songs';
import { findImage } from '~/utils/images';
import type { MetaData } from '~/types';

export const prerender = true;

export const getStaticPaths = (async () => {
  return await getStaticPathsBlogSong();
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { song } = Astro.props as Props;

const url = getCanonical(getPermalink(song?.permalink, 'songs'));
const image = (await findImage(song?.image)) as ImageMetadata | string | undefined;

const metadata = merge(
  {
    title: song?.title,
    description: song?.excerpt,
    robots: {
      index: blogSongRobots?.index,
      follow: blogSongRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...(image
        ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] }
        : {}),
    },
  },
  { ...(song?.metadata ? { ...song?.metadata, canonical: song?.metadata?.canonical || url } : {}) }
) as MetaData;
---

<Layout metadata={metadata}>
  <SinglePost post={{ ...song, image: image }} url={url}>
    {song?.Content ? <song.Content /> : <Fragment set:html={song?.content || ''} />}
  </SinglePost>
  <ToBlogLink />
</Layout>
